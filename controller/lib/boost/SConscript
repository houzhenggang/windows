# -*- mode: python; -*-
# windows reference: http://www.boost.org/doc/libs/1_62_0/more/getting_started/windows.html
import os
import sys
import subprocess

cpu_count = 1
try:
    import multiprocessing
    cpu_count = multiprocessing.cpu_count()
except ImportError:
    pass
    
vpath = '#/third_party/boost_1_62_0'
engine = vpath + '/tools/build/v2/engine'
version = '1.62.0'
print "Building windows boost..."
currentdir =  Dir('.').path


boost_libs = [
    'system', 'thread', 'date_time', 'regex', 'python', 'program_options',
    'filesystem', 'chrono'
]
def MapPath(xpath, list):
    return map(lambda x: '#/' + Dir('.').path + '/tools/' + x, list)

env = DefaultEnvironment()



stagedir = Dir('#').abspath;
stagedir += '/build/third_party/boost_1_62_0'
boostcmd = 'b2 -j4 toolset=msvc-14.0 --build-type=complete  --layout=tagged architecture=x86 address-model=32 stage --stagedir='+ stagedir

os.chdir(Dir(vpath).abspath)
assert os.path.isdir(Dir(vpath).abspath)
print Dir(vpath).abspath
print os.getcwd()

subprocess.call("bootstrap.bat", shell=True)
subprocess.call(boostcmd, shell=True)
print 'finished building boost for windows!! '

def Symlink(target, source):
    parent = os.path.dirname(target[0].abspath)
    if not os.path.exists(parent):
        os.makedirs(parent)

    if not os.path.exists(target[0].abspath):
        os.symlink(source[0].abspath, target[0].abspath)

libpath = Dir(vpath).abspath
if not os.path.exists(libpath):
    print '%s not present' % libpath
    sys.exit(1)

Symlink([Dir('#/build/include/boost')], [Dir(vpath + '/boost')])

