#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

import sys
import re
import time
import subprocess
import os

Import('AgentEnv')
env = AgentEnv.Clone()
if os.name == 'nt':
    env.Append(CPPPATH = ['#windows'])

cflags = env['CCFLAGS']
cflags.append('/w')
cflags.append('-fexceptions')


##########################################################################
# Rules to generate buildinfo.cc
##########################################################################

# Dependencies on external libraries first
buildinfo_dep_libs = [
    '#build/lib/libthrift.lib',
    '#build/lib/libthriftnb.lib',
    '#build/lib/http.lib',
    '#build/lib/http_parser.lib',
    '#build/lib/pugixml.lib',
    '#build/lib/libsandesh.lib',
    '#build/lib/sandeshflow.lib',
    '#build/lib/sandeshvns.lib'
]

def MapBuildCmnLib(list):
    return map(lambda x: File('../../../' + x).abspath, list)

# Common contrail libraries
buildinfo_dep_libs += MapBuildCmnLib([
    'base/base.lib',
    'base/cpuinfo.lib',
    'db/db.lib',
    'dns/bind/bind_interface.lib',
    'ifmap/ifmap_agent.lib',
    'ifmap/ifmap_common.lib',
    'io/io.lib',
    'ksync/ksync.lib',
    'net/net.lib',
    'route/route.lib',
    'schema/bgp_schema.lib',
    'schema/ifmap_vnc.lib',
    'schema/xmpp_unicast.lib',
    'schema/xmpp_multicast.lib',
    'vrouter/utils/vrutil.lib',
    'xml/xml.lib',
    'xmpp/xmpp.lib'
     ])

def MapBuildAgentLib(list):
    return map(lambda x: File('../' + x).abspath, list)

# agent libraries
buildinfo_dep_libs += MapBuildAgentLib([
    'cfg/cfg.lib',
    'cmn/vnswcmn.lib',
    'controller/vnswctrl.lib',
    'filter/filter.lib',
    'kstate/kstate.lib',
    'vrouter/ksync/vnswksync.lib',
    'openstack/nova_ins.lib',
    'openstack/nova_ins_thrift.lib',
    'port_ipc/port_ipc.lib',
    'oper/vnswoperdb.lib',
    'pkt/pkt.lib', 'diag/diag.lib',
    'services/agent_services.lib', 'uve/uve.lib',
    'uve/statsuve.lib', 'vrouter/flow_stats/flowstats.lib',
    'vrouter/stats_collector/statscollector.lib'
])

env.GenerateBuildInfoCode(
    target = ['buildinfo.h', 'buildinfo.cc'],
    source = buildinfo_dep_libs + ['main.cc'],
    path=str(Dir('.').abspath))
env.Depends('main.o', 'buildinfo.cc')

# Add contrail-vrouter-agent specific libraries
env.Prepend(LIBS = AgentEnv['CONTRAIL_LIBS'])

# Whole-arhive flag causes the library to be included in the resulting output
# even though there may not be any calls requiring its presence. We need this
# for kstate library so that the HTML file for kstate  is listed in agent
# introspect page
env.Prepend(LINKFLAGS = ['-Wl,--whole-archive', '-rdynamic', '-lkstate', '-ldiag',
                         '-Wl,--no-whole-archive'])

#Add -Wno-return-type to ignore errors from thrift generated code in
#InstanceService.h
if sys.platform.startswith('freebsd'):
    platform_dependent = 'freebsd/pkt0_interface.cc'
elif sys.platform.startswith('linux'):
    platform_dependent = 'linux/pkt0_interface.cc'
elif sys.platform.startswith('win'):
    platform_dependent = 'windows/pkt0_interface.cc'


contrail_vrouter_agent = env.Program(target = 'contrail-vrouter-agent',
                     source = ['buildinfo.cc',
                               'contrail_agent_init.cc',
                               'main.cc',
                               'pkt0_interface_base.cc',
                                platform_dependent])

env.Alias('contrail-vrouter-agent', contrail_vrouter_agent)
env.Default(contrail_vrouter_agent)

utils_scripts = [
  'contrail-vrouter-agent-health-check.py',
  'agent_dissector.lua',
  'mpls_dissector.lua']

# Documentation
doc_files = []
doc_files += env['AGENT_COMMON_DOC_FILES']
doc_files += env['AGENT_UVE_DOC_FILES']
doc_files += env['AGENT_KSYNC_DOC_FILES']
doc_files += env['AGENT_FLOW_DOC_FILES']

# Please update sandesh/common/vns.sandesh on process name change
env.Alias('install', env.Install(env['INSTALL_BIN'], contrail_vrouter_agent))
for utils in utils_scripts:
  env.Alias('install', env.Install(env['INSTALL_EXAMPLE'], utils))
env.Alias('install', env.Install(env['INSTALL_CONF'],
          '../contrail-vrouter-agent.conf'))
env.Alias('install',
        env.InstallAs(env['INSTALL_CONF'] + 
        '/supervisord_vrouter_files/' + 'contrail-vrouter-agent.ini',
        '../contrail-vrouter-agent.ini'))
env.Alias('install',
        env.InstallAs(env['INSTALL_INITD'] + '/contrail-vrouter-agent',
        '../contrail-vrouter.initd.supervisord'))
env.Alias('install', env.Install(env['INSTALL_CONF'], 
    '../supervisord_vrouter.conf'))
env.Alias('install', env.Install(
    env['INSTALL_MESSAGE_DOC'] + '/contrail-vrouter-agent/',
    doc_files))
